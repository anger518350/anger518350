import sqlite3
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, filters, ContextTypes
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# –ê–¥–º–∏–Ω ID
ADMIN_IDS = [5286063642]  # ‚Üê –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã
def init_db():
    with sqlite3.connect("materials.db") as conn:
        cur = conn.cursor()
        cur.execute('CREATE TABLE IF NOT EXISTS categories (id INTEGER PRIMARY KEY, name TEXT)')
        cur.execute('''CREATE TABLE IF NOT EXISTS subcategories (
                        id INTEGER PRIMARY KEY, name TEXT, category_id INTEGER)''')
        cur.execute('''CREATE TABLE IF NOT EXISTS materials (
                        id INTEGER PRIMARY KEY, name TEXT, file_type TEXT,
                        file_id TEXT, description TEXT, subcategory_id INTEGER)''')
        conn.commit()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
def is_admin(user_id): return user_id in ADMIN_IDS

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_categories(update, context)

# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def show_categories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    with sqlite3.connect("materials.db") as conn:
        cur = conn.cursor()
        cur.execute('SELECT id, name FROM categories')
        cats = cur.fetchall()

    if not cats:
        await update.message.reply_text("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return

    keyboard = [[InlineKeyboardButton(name, callback_data=f"cat_{id}")] for id, name in cats]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=InlineKeyboardMarkup(keyboard))

# –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    await query.answer()

    if data.startswith("cat_"):
        cat_id = int(data.split("_")[1])
        context.user_data["cat_id"] = cat_id
        with sqlite3.connect("materials.db") as conn:
            cur = conn.cursor()
            cur.execute('SELECT id, name FROM subcategories WHERE category_id=?', (cat_id,))
            subs = cur.fetchall()

        if not subs:
            await query.edit_message_text("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            return

        keyboard = [[InlineKeyboardButton(name, callback_data=f"sub_{id}")] for id, name in subs]
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif data.startswith("sub_"):
        sub_id = int(data.split("_")[1])
        with sqlite3.connect("materials.db") as conn:
            cur = conn.cursor()
            cur.execute('SELECT name, file_type, file_id, description FROM materials WHERE subcategory_id=?', (sub_id,))
            materials = cur.fetchall()

        if not materials:
            await query.edit_message_text("–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            return

        text = "\n\n".join(f"üìÑ {m[0]} ‚Äî {m[3]}" for m in materials)
        await query.edit_message_text(f"–ú–∞—Ç–µ—Ä–∏–∞–ª—ã:\n\n{text}")

# –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    keyboard = [
        [InlineKeyboardButton("‚ûï –ö–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="add_category")],
        [InlineKeyboardButton("‚ûï –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="add_subcategory")],
        [InlineKeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", callback_data="upload_material")]
    ]
    await update.message.reply_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=InlineKeyboardMarkup(keyboard))

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def admin_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "add_category":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
        context.user_data["admin_action"] = "add_category"
    elif data == "add_subcategory":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
        context.user_data["admin_action"] = "add_subcategory"
    elif data == "upload_material":
        await query.edit_message_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –ø–æ–¥–ø–∏—Å—å—é: –Ω–∞–∑–≤–∞–Ω–∏–µ | –æ–ø–∏—Å–∞–Ω–∏–µ")
        context.user_data["admin_action"] = "upload_material"

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤ –æ—Ç –∞–¥–º–∏–Ω–∞
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return

    action = context.user_data.get("admin_action")
    text = update.message.text

    if action == "add_category":
        with sqlite3.connect("materials.db") as conn:
            conn.execute("INSERT INTO categories(name) VALUES(?)", (text,))
        await update.message.reply_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{text}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    elif action == "add_subcategory":
        cat_id = context.user_data.get("cat_id")
        if not cat_id:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (/start).")
            return
        with sqlite3.connect("materials.db") as conn:
            conn.execute("INSERT INTO subcategories(name, category_id) VALUES(?,?)", (text, cat_id))
        await update.message.reply_text(f"–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è '{text}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    context.user_data.clear()

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return

    action = context.user_data.get("admin_action")
    if action != "upload_material":
        return

    caption = update.message.caption
    if not caption or "|" not in caption:
        await update.message.reply_text("–î–æ–±–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ |")
        return

    name, description = [c.strip() for c in caption.split("|", 1)]
    file_id = update.message.document.file_id
    file_type = "document"
    sub_id = context.user_data.get("sub_id")

    if not sub_id:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
        return

    with sqlite3.connect("materials.db") as conn:
        conn.execute(
            "INSERT INTO materials(name, file_type, file_id, description, subcategory_id) VALUES(?,?,?,?,?)",
            (name, file_type, file_id, description, sub_id)
        )
    await update.message.reply_text("–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω.")
    context.user_data.clear()

# –ó–∞–ø—É—Å–∫
def main():
    init_db()
    app = Application.builder().token("YOUR_BOT_TOKEN").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("admin", admin))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(CallbackQueryHandler(admin_button, pattern="^(add_category|add_subcategory|upload_material)$"))
    app.add_handler(MessageHandler(filters.TEXT & filters.USER(ADMIN_IDS), handle_text))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))

    app.run_polling()

if __name__ == "__main__":
    main()

