import sqlite3
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Updater,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    Filters,
    CallbackContext
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –ø–∞—Ä–æ–ª—å
ADMIN_IDS = [5286063642]
ADMIN_PASSWORD = "0776"

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ---
def create_tables():
    conn = sqlite3.connect('materials.db')
    c = conn.cursor()
    # –¢–∞–±–ª–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    c.execute('''CREATE TABLE IF NOT EXISTS categories (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT NOT NULL)''')
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
    c.execute('''CREATE TABLE IF NOT EXISTS subcategories (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT NOT NULL,
                    category_id INTEGER NOT NULL,
                    FOREIGN KEY(category_id) REFERENCES categories(id))''')
    # –¢–∞–±–ª–∏—Ü–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    c.execute('''CREATE TABLE IF NOT EXISTS materials (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT NOT NULL,
                    file_type TEXT,
                    file_id TEXT NOT NULL,
                    description TEXT,
                    subcategory_id INTEGER NOT NULL,
                    FOREIGN KEY(subcategory_id) REFERENCES subcategories(id))''')
    conn.commit()
    conn.close()

# ===================== –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å =====================

def start(update: Update, context: CallbackContext):
    update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
    show_categories(update, context)


def show_categories(update: Update, context: CallbackContext):
    conn = sqlite3.connect('materials.db')
    c = conn.cursor()
    c.execute('SELECT id, name FROM categories')
    categories = c.fetchall()
    conn.close()
    if not categories:
        update.message.reply_text("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    keyboard = [[InlineKeyboardButton(cat[1], callback_data=f"category_{cat[0]}")] for cat in categories]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)


def show_subcategories(update: Update, context: CallbackContext):
    query = update.callback_query
    if query.data == "back_to_categories":
        query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
        show_categories(update, context)
        return
    category_id = query.data.split('_')[1]
    context.user_data['category_id'] = category_id
    conn = sqlite3.connect('materials.db')
    c = conn.cursor()
    c.execute('SELECT id, name FROM subcategories WHERE category_id = ?', (category_id,))
    subcats = c.fetchall()
    conn.close()
    if not subcats:
        query.edit_message_text("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        return
    keyboard = [[InlineKeyboardButton(sc[1], callback_data=f"subcategory_{sc[0]}")] for sc in subcats]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_categories")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)


def show_materials(update: Update, context: CallbackContext):
    query = update.callback_query
    if query.data == "back_to_subcategories":
        show_subcategories(update, context)
        return
    subcat_id = query.data.split('_')[1]
    context.user_data['subcategory_id'] = subcat_id
    conn = sqlite3.connect('materials.db')
    c = conn.cursor()
    c.execute(
        'SELECT name, file_type, file_id, description FROM materials WHERE subcategory_id = ?',
        (subcat_id,)
    )
    materials = c.fetchall()
    conn.close()
    if not materials:
        query.edit_message_text("–í –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.")
        return
    text = "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã:\n\n"
    keyboard = []
    for mat in materials:
        text += f"üìÑ {mat[0]}\nüìù {mat[3] or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"
        keyboard.append([InlineKeyboardButton(mat[0], callback_data=f"get_{mat[1]}_{mat[2]}")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_subcategories")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(text=text, reply_markup=reply_markup)


def handle_download_request(update: Update, context: CallbackContext):
    query = update.callback_query
    try:
        _, file_type, file_id = query.data.split('_', 2)
    except ValueError:
        query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å!")
        return
    chat_id = query.message.chat.id
    if file_type == "document":
        context.bot.send_document(chat_id=chat_id, document=file_id)
    elif file_type == "photo":
        context.bot.send_photo(chat_id=chat_id, photo=file_id)
    elif file_type == "video":
        context.bot.send_video(chat_id=chat_id, video=file_id)
    query.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")

# ===================== –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ =====================

def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

# ...–æ—Å—Ç–∞–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...

# ===================== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ =====================

def handle_document_upload(update: Update, context: CallbackContext):
    if context.user_data.get('admin_action') != 'material_file':
        return
    file_type, file_id = None, None
    if update.message.document:
        file_type = 'document'
        file_id = update.message.document.file_id
    elif update.message.photo:
        file_type = 'photo'
        file_id = update.message.photo[-1].file_id
    elif update.message.video:
        file_type = 'video'
        file_id = update.message.video.file_id
    else:
        update.message.reply_text('–§–∞–π–ª –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        return
    subcat_id = context.user_data.get('subcategory_id')
    name = context.user_data.get('material_name')
    description = context.user_data.get('material_desc')
    conn = sqlite3.connect('materials.db')
    c = conn.cursor()
    c.execute(
        'INSERT INTO materials (name, file_type, file_id, description, subcategory_id) VALUES (?, ?, ?, ?, ?)',
        (name, file_type, file_id, description, subcat_id)
    )
    conn.commit()
    conn.close()
    update.message.reply_text('–ú–∞—Ç–µ—Ä–∏–∞–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.')
    context.user_data.clear()

# ===================== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ =====================

def main():
    create_tables()
    updater = Updater("8029940673:AAEjVG8sEPsw4G7EROviyhcpQtjSfPkPDCU", use_context=True)
    dp = updater.dispatcher

    # –ö–æ–º–∞–Ω–¥—ã
    dp.add_handler(CommandHandler('start', start))
    dp.add_handler(CommandHandler('admin', show_admin_menu))
    # CallbackQuery –¥–ª—è inline –∫–Ω–æ–ø–æ–∫
    dp.add_handler(CallbackQueryHandler(button_handler))
    # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω-–æ–ø–µ—Ä–∞—Ü–∏–π
    dp.add_handler(MessageHandler(Filters.text & Filters.user(user_id=ADMIN_IDS), admin_text_handler))
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –∞–¥–º–∏–Ω–æ–º
    dp.add_handler(MessageHandler(
        (Filters.document | Filters.photo | Filters.video) &
        Filters.user(user_id=ADMIN_IDS),
        handle_document_upload
    ))

    # –ó–∞–ø—É—Å–∫ polling
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
